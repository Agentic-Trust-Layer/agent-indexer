// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Registered extends ethereum.Event {
  get params(): Registered__Params {
    return new Registered__Params(this);
  }
}

export class Registered__Params {
  _event: Registered;

  constructor(event: Registered) {
    this._event = event;
  }

  get uid(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get registerer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SchemaRegistry__getSchemaResultValue0Struct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get resolver(): Address {
    return this[1].toAddress();
  }

  get revocable(): boolean {
    return this[2].toBoolean();
  }

  get schema(): string {
    return this[3].toString();
  }
}

export class SchemaRegistry extends ethereum.SmartContract {
  static bind(address: Address): SchemaRegistry {
    return new SchemaRegistry("SchemaRegistry", address);
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getSchema(uid: Bytes): SchemaRegistry__getSchemaResultValue0Struct {
    let result = super.call(
      "getSchema",
      "getSchema(bytes32):((bytes32,address,bool,string))",
      [ethereum.Value.fromFixedBytes(uid)],
    );

    return changetype<SchemaRegistry__getSchemaResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getSchema(
    uid: Bytes,
  ): ethereum.CallResult<SchemaRegistry__getSchemaResultValue0Struct> {
    let result = super.tryCall(
      "getSchema",
      "getSchema(bytes32):((bytes32,address,bool,string))",
      [ethereum.Value.fromFixedBytes(uid)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SchemaRegistry__getSchemaResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  register(schema: string, resolver: Address, revocable: boolean): Bytes {
    let result = super.call(
      "register",
      "register(string,address,bool):(bytes32)",
      [
        ethereum.Value.fromString(schema),
        ethereum.Value.fromAddress(resolver),
        ethereum.Value.fromBoolean(revocable),
      ],
    );

    return result[0].toBytes();
  }

  try_register(
    schema: string,
    resolver: Address,
    revocable: boolean,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "register",
      "register(string,address,bool):(bytes32)",
      [
        ethereum.Value.fromString(schema),
        ethereum.Value.fromAddress(resolver),
        ethereum.Value.fromBoolean(revocable),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get schema(): string {
    return this._call.inputValues[0].value.toString();
  }

  get resolver(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get revocable(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
